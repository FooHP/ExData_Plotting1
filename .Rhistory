# read the y train file
y_train=read.table("y_train.txt")
str(y_train)
nrow(y_train)
table(y_train$V1)
# this has the number of occorences of the types of activities from 1 to 6 which is explained below
activity=read.table("activity_labels.txt")
str(activity)
# So there are a total of 6 activities as seen in the activity table
# we read the test data set in a similar way as we read the train data
subject_test=read.table("subject_test.txt")
str(subject_test)
names(subject_test)="participant"
x_test=read.table("X_test.txt")
str(x_test)
y_test=read.table("y_test.txt")
# now we combine the training and the test data set using the row bind function
merged_data=rbind(training,test)
nrow(merged_data)
ncol(merged_data)
str(merged_data)
names(merged_data)
#==================================================================
# PROBLEM 1:
# Merges the training and the test sets to create one data set.
merged_data=rbind(x_train,x_test)
str(merged_data)
# this has 10299 obs and 561 variables
#==================================================================
# PROBLEM 2:
# Extracts only the measurements on the mean and standard deviation for each measurement.
# the measurement variables are present in features table as we read above
# According to the problem statement we needto filter the variables so that we are left with only
# the mean() and the std() [standard deviation measurements].I do it with grepl function
MeanVar=grepl("mean\\(\\)",features$V2) # this gives us the location of the variable for mean() measurements
StdVar=grepl("std\\(\\)",features$V2)  # this gives us the location of the variable for std() measurements
MeanRows=which(MeanVar==TRUE) # to fins the row number of the mean() reasurements
StdRows=which(StdVar==TRUE)   # to fins the row number of the std() reasurements
allVar=c(MeanRows,StdRows)    # gives all the variables we need to keep and delete the rest
# now we need to extract only the variables from the merged_data DF whoch have the variables as filtered above
merged_data=merged_data[,allVar]
str(merged_data)  # this keeps only the required variables as wanted by the Problem statement
#==================================================================
# PROBLEM 4:
#Appropriately labels the data set with descriptive variable names.
#let us borrow the descriptive names of the variables from the features table
# V2 variable of features has all the descripive names. Let put them into a vector
Varnames=features$V2
# now we need only the var names with mean() and std() as we filtered in Problem2.
Varnames=Varnames[allVar]
length(Varnames)
# let us put these variable names into the merged_data
names(merged_data)=Varnames
#==================================================================
# PROBLEM 3:
#Uses descriptive activity names to name the activities in the data set
# the activity names are present in the activity data frame
# the activity of each measuremtn is present in y_train and y_test data frames
# let us merge these into the merged_data DF
all_activity=rbind(y_train,y_test)
str(all_activity)
names(all_activity)="activity"
merged_data=cbind(merged_data,all_activity)
str(merged_data)
#==================================================================
# PROBLEM 5:
#From the data set in step 4, creates a second, independent tidy data set
#with the average of each variable for each activity and each subject.
# let us add the subject to the merged data set
all_subject=rbind(subject_train,subject_test)
str(all_subject)
# then merge it to the merged data frame
merged_data=cbind(all_subject,merged_data)
str(merged_data)
dim(merged_data)
library(dplyr)
library(plyr)
colnames(merged_data)
arrange(merged_data,participant,activity)
tidy_data=ddply(merged_data,.(participant,activity),function(x) colMeans(merged_data[,2:67]))
dim(tidy_data)
write.table(tidy_data,file="tidy_data.txt",row.names = FALSE)
View(tidy_data)
S2file <- "https://s3.amazonaws.com/coursera-uploads/user-96073a096df87e60e4de5f07/975114/asst-3/088fb040332111e58546f129bb60403a.txt"
S2data <- read.table(S2file,header=TRUE)
View(S2data)
library(data.table)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
destination<-"getdata_Dataset.zip"
download.file(fileurl,destfile=destination,method="curl")
unzip("getdata_Dataset.zip")
testx<-read.table("X_test.txt")
testy<-read.table("y_test.txt")
testsubject<-read.table("subject_test.txt")
trainx<-read.table("X_train.txt")
trainy<-read.table("y_train.txt")
trainsubject<-read.table("subject_train.txt")
activity<-read.table("activity_labels.txt",colClasses="character")
features<-read.table("features.txt",colClasses="character")
testy$V1<-factor(testy$V1,levels=activity$V1,labels=activity$V2)
testy$V1
trainy$V1<-factor(trainy$V1,levels=activity$V1,labels=activity$V2)
trainy$v1
trainy$V1
colnames(testx)<-features$V2
head(testx)
head(1:2,)
testx[1:2,]
colnames(trainx)<-features$V2
colnames(testy)<-c("Activity")
colnames(trainy)<-c("Activity")
colnames(testsubject)<-c("Subject")
colnames(trainsubject)<-c("Subject")
trainx[1,]
head(testy)
head(trainy)
head(tesetsubject)
head(testsubject)
head(trainsubject)
testdata<-cbind(testx,testy)
tesdata[1,]
testdata[1,]
testdata<-cbind(testdata,testsubject)
testdata[1,]
traindata<-cbind(trainx,trainy)
traindata<-cbind(traindata,trainsubject)
overallData<-rbind(testdata,traindata)
head(overallData)
overallData[1,]
overallDatamean<-sapply(overallData,mean)
overallDatastandard<-sapply(overallData,sd)
class(overallDatamean)
dataset<-data.table(overallData)
dataset[1,]
dataset[,563]
dataset[1:100,563]
dim(dataset)
tail(dataset)
head(dataset)
View(dataset)
View(overallData)
View(dataset)
dataset<-dataset[,lapply(.SD,mean),by="Activity,Subject"]
View(dataset)
write.table(dataset,file="variable_average.txt",sep=",",row.names=FALSE)
a <- read.table("variable_average.txt",header=TRUE)
?read.table
a <- read.table("variable_average.txt",header=TRUE,nrows=50)
View(a)
?lapply
class(dataset)
S3file <- "https://s3.amazonaws.com/coursera-uploads/user-2d8a9ccf902b16ee07af5840/975114/asst-3/84dbe60030f611e58061c3793588ec99.txt"
S3data <- read.table(S3file,header=TRUE)
activities <- read.table("activity_labels.txt", quote="\"", stringsAsFactors=FALSE)
features <- read.table("features.txt", quote="\"", stringsAsFactors=FALSE)
X_test <- read.table("X_test.txt", quote="\"", stringsAsFactors=FALSE)
y_test <- read.table("y_test.txt", quote="\"", stringsAsFactors=FALSE)
subject_test <- read.table("subject_test.txt", quote="\"", stringsAsFactors=FALSE)
X_train <- read.table("X_train.txt", quote="\"", stringsAsFactors=FALSE)
y_train <- read.table("y_train.txt", quote="\"", stringsAsFactors=FALSE)
subject_train <- read.table("subject_train.txt", quote="\"", stringsAsFactors=FALSE)
X <- rbind(X_train,X_test)
y <- rbind(y_train,y_test)
subject <- rbind(subject_train,subject_test)
DS <- cbind(subject,y,X)
head(DS)
head(X)
head(y)
head(ytrain)
head(y_train)
X <- rbind(X_train,X_test)
head(X)
y <- rbind(y_train,y_test)
head(y)
y_train
head(y_train)
getwd()
setwd("~/getdata-projectfiles-UCI Har Dataset")
getwd()
activities <- read.table("UCI HAR Dataset/activity_labels.txt", quote="\"", stringsAsFactors=FALSE)
features <- read.table("UCI HAR Dataset/features.txt", quote="\"", stringsAsFactors=FALSE)
X_test <- read.table("UCI HAR Dataset/test/X_test.txt", quote="\"", stringsAsFactors=FALSE)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", quote="\"", stringsAsFactors=FALSE)
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", quote="\"", stringsAsFactors=FALSE)
X_train <- read.table("UCI HAR Dataset/train/X_train.txt", quote="\"", stringsAsFactors=FALSE)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", quote="\"", stringsAsFactors=FALSE)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", quote="\"", stringsAsFactors=FALSE)
# Combine the two data sets
X <- rbind(X_train,X_test)
y <- rbind(y_train,y_test)
subject <- rbind(subject_train,subject_test)
head(y)
DS <- cbind(subject,y,X)
names(DS)[1:2] <- c("subject","activityNum")
names(DS)[3:563] <- features[,2]
names(activities) <- c("activityNum","activityDescription")
head(DS)
DS[1,]
View(DS)
neededCols <- c(names(DS)[regexpr("(mean)|(std)",names(DS))>=0 & regexpr("Freq",names(DS))==-1])
DS <- DS[c("subject","activityNum",neededCols)]
View(DS)
DS <- merge(x = activities,y = DS,by="activityNum")
View(DS)
library(reshape2)
VARS = names(DS)[4:69]
IDS = names(DS)[2:3]
DS_long=melt(DS[c(IDS,VARS)],id.vars=IDS,na.rm=TRUE)
DS_meansBySubjectAndActivity = dcast(DS_long,subject + activityDescription ~ variable,value.var="value",mean)
write.csv(DS_meansBySubjectAndActivity,file="meansBySubjectAndActivity.txt",row.names = F)
getwd()
a<- read.table("meansBySubjectAndActivity.txt",header=TRUE)
?read.table
a<- read.table("meansBySubjectAndActivity.txt",header=TRUE,na.strings = "NA")
a<- read.csv("meansBySubjectAndActivity.txt",header=TRUE)
View(a)
View(MergeData)
S3data <- read.csv(S3file,header=TRUE)
S3file <- "https://s3.amazonaws.com/coursera-uploads/user-2d8a9ccf902b16ee07af5840/975114/asst-3/84dbe60030f611e58061c3793588ec99.txt"
S3data <- read.csv(S3file,header=TRUE)
View(S3data)
getwd()
setwd("C:/Users/Dan/Documents")
View(MergedData)
MergedData <- read.table("MergedData.txt",header=TRUE)
View(MergedData)
getwd()
testx<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/X_test.txt")
testx<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/X_test.txt")
testy<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/y_test.txt")
testsubject<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test/subject_test.txt")
trainx<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/X_train.txt")
trainy<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/y_train.txt")
trainsubject<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train/subject_train.txt")
activity<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/activity_labels.txt",colClasses="character")
features<-read.table("getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/features.txt",colClasses="character")
head(trainy)
head(trainsubject)
testy$V1<-factor(testy$V1,levels=activity$V1,labels=activity$V2)
trainy$V1<-factor(trainy$V1,levels=activity$V1,labels=activity$V2)
colnames(testx)<-features$V2
colnames(trainx)<-features$V2
colnames(testy)<-c("Activity")
colnames(trainy)<-c("Activity")
colnames(testsubject)<-c("Subject")
colnames(trainsubject)<-c("Subject")
testdata<-cbind(testx,testy)
testdata<-cbind(testdata,testsubject)
traindata<-cbind(trainx,trainy)
traindata<-cbind(traindata,trainsubject)
overallData<-rbind(testdata,traindata)
overallDatamean<-sapply(overallData,mean)
overallDatastandard<-sapply(overallData,sd)
View(overallData)
getwd()
head(overallData)
overallData[1,]
dataset<-data.table(overallData)
dataset<-dataset[,lapply(.SD,mean),by="Activity,Subject"]
write.table(dataset,file="variable_average.txt",sep=",",row.names=FALSE)
View(dataset)
head(dataset)
dataset[1,]
?view
?View
View(dataset)
S2file <-"https://s3.amazonaws.com/coursera-uploads/user-96073a096df87e60e4de5f07/975114/asst-3/088fb040332111e58546f129bb60403a.txt"
S2data <- read(S2file,sep=",",header=TRUE)
S2data <- read.table(S2file,sep=",",header=TRUE)
View(S2data)
head(S2data)
S2data[,c(1:10)]
a <- colnames(S2data)
a
summary(S2data)
str(S2data)
?.SD
?lapply
S1file <- "https://s3.amazonaws.com/coursera-uploads/user-c755eb6b71680dfbddb828b2/975114/asst-3/4acb9f1033d411e59d2c9d9d9e18bd7f.txt"
S1data <- read.table(S1file,header=TRUE)
View(S1data)
curdir<-getwd()
setwd("~/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
getwd()
subject_train=read.table("subject_train.txt")
# lets give the variable a name say participant
names(subject_train)="participant"
str(subject_train)
setwd(train)
inputdir <- getwd()
setwd("~/train")
getwd
getwd()
setwd("~/train")
setwd("~/train/")
getwd()
a <-getwd()
getwd()
?setwd
setwd("C:/Users/Dan/Documents/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/train")
getwd()
subject_train=read.table("subject_train.txt")
# lets give the variable a name say participant
names(subject_train)="participant"
str(subject_train)
..
x_train=read.table("X_train.txt")
str(x_train)
nrow(x_train)
ncol(x_train)
# read the y train file
y_train=read.table("y_train.txt")
str(y_train)
nrow(y_train)
table(y_train$V1)
# this has the number of occorences of the types of activities from 1 to 6 which is explained below
setwd("C:/Users/Dan/Documents/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
features=read.table("features.txt")
str(features)
# this contains two variables one gives the serial number and the second variable gives the measurement taken
# let us save the measurements into a vector
# there are 561 variable names or measurements
activity=read.table("activity_labels.txt")
str(activity)
# So there are a total of 6 activities as seen in the activity table
setwd("~/test")
setwd("C:/Users/Dan/Documents/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset/test")
getwd()
# we read the test data set in a similar way as we read the train data
subject_test=read.table("subject_test.txt")
str(subject_test)
names(subject_test)="participant"
x_test=read.table("X_test.txt")
str(x_test)
y_test=read.table("y_test.txt")
merged_data=rbind(training,test)
nrow(merged_data)
ncol(merged_data)
str(merged_data)
names(merged_data)
#==================================================================
# PROBLEM 1:
# Merges the training and the test sets to create one data set.
merged_data=rbind(x_train,x_test)
str(merged_data)
# this has 10299 obs and 561 variables
#==================================================================
# PROBLEM 2:
# Extracts only the measurements on the mean and standard deviation for each measurement.
# the measurement variables are present in features table as we read above
# According to the problem statement we needto filter the variables so that we are left with only
# the mean() and the std() [standard deviation measurements].I do it with grepl function
MeanVar=grepl("mean\\(\\)",features$V2) # this gives us the location of the variable for mean() measurements
StdVar=grepl("std\\(\\)",features$V2)  # this gives us the location of the variable for std() measurements
MeanRows=which(MeanVar==TRUE) # to fins the row number of the mean() reasurements
StdRows=which(StdVar==TRUE)   # to fins the row number of the std() reasurements
allVar=c(MeanRows,StdRows)    # gives all the variables we need to keep and delete the rest
# now we need to extract only the variables from the merged_data DF whoch have the variables as filtered above
merged_data=merged_data[,allVar]
str(merged_data)  # this keeps only the required variables as wanted by the Problem statement
#==================================================================
# PROBLEM 4:
#Appropriately labels the data set with descriptive variable names.
#let us borrow the descriptive names of the variables from the features table
# V2 variable of features has all the descripive names. Let put them into a vector
Varnames=features$V2
# now we need only the var names with mean() and std() as we filtered in Problem2.
Varnames=Varnames[allVar]
length(Varnames)
# let us put these variable names into the merged_data
names(merged_data)=Varnames
#==================================================================
# PROBLEM 3:
#Uses descriptive activity names to name the activities in the data set
# the activity names are present in the activity data frame
# the activity of each measuremtn is present in y_train and y_test data frames
# let us merge these into the merged_data DF
all_activity=rbind(y_train,y_test)
str(all_activity)
names(all_activity)="activity"
merged_data=cbind(merged_data,all_activity)
str(merged_data)
#==================================================================
# PROBLEM 5:
#From the data set in step 4, creates a second, independent tidy data set
#with the average of each variable for each activity and each subject.
# let us add the subject to the merged data set
all_subject=rbind(subject_train,subject_test)
str(all_subject)
# then merge it to the merged data frame
merged_data=cbind(all_subject,merged_data)
str(merged_data)
dim(merged_data)
library(dplyr)
library(plyr)
colnames(merged_data)
arrange(merged_data,participant,activity)
tidy_data=ddply(merged_data,.(participant,activity),function(x) colMeans(merged_data[,2:67]))
dim(tidy_data)
View(tidy_data)
View(merged_data)
getwd()
setwd("C:/Users/Dan/Documents")
a <- read.table("https://class.coursera.org/getdata-030/human_grading/view/courses/975114/assessments/3/peerGradingSets/139/peerGradings/0",header=TRUE)
S1file <- "https://class.coursera.org/getdata-030/human_grading/view/courses/975114/assessments/3/peerGradingSets/139/peerGradings/0"
S1data <- read.table(S1file,header=TRUE)
setwd()
getwd()
S2file <- "https://s3.amazonaws.com/coursera-uploads/user-96073a096df87e60e4de5f07/975114/asst-3/088fb040332111e58546f129bb60403a.txt"
S2data <- read.table(S2file,sep=",",header=TRUE)
View(S2data)
?windows
?xfig
?postscript
?jpeg
?pch
?points
?plot
?pch
example(pch)
?lty
?lines
?lty
??lty
getwd()
setwd("C:/Users/Dan/ExData_Plotting1")
## Download the Dataset: Electric power consumption into your current working directory
## Read the dataset into R using read.table
powerdata <- read.table("household_power_consumption.txt",sep=";",header=TRUE,na.strings = "?")
## Extract  data from the dates 2007-02-01 to  2007-02-02
powerdata$Date <- as.Date(powerdata$Date,"%d/%m/%Y")
pdata <- powerdata[(powerdata$Date <= "2007-02-02" & powerdata$Date >= "2007-02-01"),]
## Open PNG device; create "plot1.png" in the current working directory
png(filename="plot1.png",height=480,width=480)
## Use the base plotting system to draw a histogram of Global_active_power
hist(pdata$Global_active_power,main = "Global Active Power",xlab="Global Active Power (kilowatts)",col="red")
## Close the PNG file device
dev.off()
## Download the Dataset: Electric power consumption into your current working directory
## Read the dataset into R using read.table
powerdata <- read.table("household_power_consumption.txt",sep=";",header=TRUE,na.strings = "?")
## Extract  data from the dates 2007-02-01 to  2007-02-02
powerdata$Date <- as.Date(powerdata$Date,"%d/%m/%Y")
pdata <- powerdata[(powerdata$Date <= "2007-02-02" & powerdata$Date >= "2007-02-01"),]
## convert the Date and Time variables to POSIXlt
## %F   Equivalent to %Y-%m-%d (the ISO 8601 date format)
## %T   Equivalent to %H:%M:%S
## For more information issue ?strptime
datetime <- strptime(paste(pdata$Date,pdata$Time),"%F %T")
## Open PNG device; create "plot2.png" in the current working directory
png(filename="plot2.png",height=480,width=480)
## Use the base plotting system to plot Global_active_power vs datetime
plot(datetime,pdata$Global_active_power,xlab="",ylab="Global Active Power (kilowatts)",type="l")
## Close the PNG file device
dev.off()
## Download the Dataset: Electric power consumption into your current working directory
## Read the dataset into R using read.table
powerdata <- read.table("household_power_consumption.txt",sep=";",header=TRUE,na.strings = "?")
## Extract  data from the dates 2007-02-01 to  2007-02-02
powerdata$Date <- as.Date(powerdata$Date,"%d/%m/%Y")
pdata <- powerdata[(powerdata$Date <= "2007-02-02" & powerdata$Date >= "2007-02-01"),]
## convert the Date and Time variables to POSIXlt
## %F   Equivalent to %Y-%m-%d (the ISO 8601 date format)
## %T   Equivalent to %H:%M:%S
## For more information issue ?strptime
datetime <- strptime(paste(pdata$Date,pdata$Time),"%F %T")
## Extract Sub_metering data
Energy1 <- pdata$Sub_metering_1
Energy2 <- pdata$Sub_metering_2
Energy3 <- pdata$Sub_metering_3
## Open PNG device; create "plot3.png" in the current working directory
png(filename="plot3.png",height=480,width=480)
## Use the base plotting system to plot Sub_metering vs datetime  in one chart
plot(datetime,Energy1,xlab="",ylab="Energy sub metering",type = "n")
lines(datetime,Energy1,col="black")
lines(datetime,Energy2,col="red")
lines(datetime,Energy3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
## Close the PNG file device
dev.off()
## Download the Dataset: Electric power consumption into your current working directory
## Read the dataset into R using read.table
powerdata <- read.table("household_power_consumption.txt",sep=";",header=TRUE,na.strings = "?")
## Extract  data from the dates 2007-02-01 to  2007-02-02
powerdata$Date <- as.Date(powerdata$Date,"%d/%m/%Y")
pdata <- powerdata[(powerdata$Date <= "2007-02-02" & powerdata$Date >= "2007-02-01"),]
## convert the Date and Time variables to POSIXlt
## %F   Equivalent to %Y-%m-%d (the ISO 8601 date format)
## %T   Equivalent to %H:%M:%S
## For more information issue ?strptime
datetime <- strptime(paste(pdata$Date,pdata$Time),"%F %T")
## Extract Sub_metering data
Energy1 <- pdata$Sub_metering_1
Energy2 <- pdata$Sub_metering_2
Energy3 <- pdata$Sub_metering_3
## Open PNG device; create "plot4.png" in the current working directory
png(filename="plot4.png",height=480,width=480)
## Multiple Base Plots
par(mfcol=c(2,2))
par(mar=c(4,4,2,2))
plot(datetime,pdata$Global_active_power,xlab="",ylab="Global Active Power",type="l")
plot(datetime,Energy1,xlab="",ylab="Energy sub metering",type = "n")
lines(datetime,Energy1)
lines(datetime,Energy2,col="red")
lines(datetime,Energy3,col="blue")
legend("topright",lty=1,col=c("black","red","blue"),bty="n",
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(datetime,pdata$Voltage,xlab="datetime",ylab="Voltage",type="l")
plot(datetime,pdata$Global_reactive_power,xlab="datetime",ylab="Global_reactive_power",type="l")
## Close the PNG file device
dev.off()
